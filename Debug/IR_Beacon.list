
IR_Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029c4  080029c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080029c4  080029c4  000129c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029cc  080029cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029cc  080029cc  000129cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029d0  080029d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080029e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080029e0  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009aee  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f3  00000000  00000000  00029b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0002b320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  0002bc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b82  00000000  00000000  0002c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000906e  00000000  00000000  00044ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c44e  00000000  00000000  0004e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea4b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002360  00000000  00000000  000ea50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002964 	.word	0x08002964

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002964 	.word	0x08002964

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fa0a 	bl	80008e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f81f 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f8b9 	bl	8000648 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d6:	f000 f887 	bl	80005e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t ir_status = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(IR_emitter_GPIO_Port, IR_emitter_Pin, 1);
 80004de:	2201      	movs	r2, #1
 80004e0:	2110      	movs	r1, #16
 80004e2:	4809      	ldr	r0, [pc, #36]	; (8000508 <main+0x44>)
 80004e4:	f000 fd06 	bl	8000ef4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ir_status = HAL_GPIO_ReadPin(IR_reciever_GPIO_Port, IR_reciever_Pin);
 80004e8:	2120      	movs	r1, #32
 80004ea:	4807      	ldr	r0, [pc, #28]	; (8000508 <main+0x44>)
 80004ec:	f000 fcea 	bl	8000ec4 <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart2, &ir_status, 1, 100);
 80004f4:	1df9      	adds	r1, r7, #7
 80004f6:	2364      	movs	r3, #100	; 0x64
 80004f8:	2201      	movs	r2, #1
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <main+0x48>)
 80004fc:	f001 fdd6 	bl	80020ac <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000500:	2064      	movs	r0, #100	; 0x64
 8000502:	f000 fa63 	bl	80009cc <HAL_Delay>
	  ir_status = HAL_GPIO_ReadPin(IR_reciever_GPIO_Port, IR_reciever_Pin);
 8000506:	e7ef      	b.n	80004e8 <main+0x24>
 8000508:	48000400 	.word	0x48000400
 800050c:	20000028 	.word	0x20000028

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b0a4      	sub	sp, #144	; 0x90
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800051a:	2244      	movs	r2, #68	; 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fa18 	bl	8002954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2234      	movs	r2, #52	; 0x34
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fa0a 	bl	8002954 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000540:	f000 fcf0 	bl	8000f24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000544:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <SystemClock_Config+0xd4>)
 8000546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800054a:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <SystemClock_Config+0xd4>)
 800054c:	f023 0318 	bic.w	r3, r3, #24
 8000550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000554:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000558:	f000 fd02 	bl	8000f60 <HAL_PWREx_ControlVoltageScaling>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000562:	f000 f8bb 	bl	80006dc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000566:	2314      	movs	r3, #20
 8000568:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800056a:	2301      	movs	r3, #1
 800056c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800056e:	2301      	movs	r3, #1
 8000570:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000576:	23a0      	movs	r3, #160	; 0xa0
 8000578:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057a:	2300      	movs	r3, #0
 800057c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fd42 	bl	800100c <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800058e:	f000 f8a5 	bl	80006dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000596:	2300      	movs	r3, #0
 8000598:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 f993 	bl	80018d8 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005b8:	f000 f890 	bl	80006dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005bc:	2302      	movs	r3, #2
 80005be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fb8c 	bl	8001ce4 <HAL_RCCEx_PeriphCLKConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005d2:	f000 f883 	bl	80006dc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005d6:	f001 fd0b 	bl	8001ff0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005da:	bf00      	nop
 80005dc:	3790      	adds	r7, #144	; 0x90
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <MX_USART2_UART_Init+0x5c>)
 80005f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800062c:	f001 fcf0 	bl	8002010 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000636:	f000 f851 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000028 	.word	0x20000028
 8000644:	40004400 	.word	0x40004400

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_GPIO_Init+0x8c>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <MX_GPIO_Init+0x8c>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_GPIO_Init+0x8c>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_GPIO_Init+0x8c>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <MX_GPIO_Init+0x8c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_GPIO_Init+0x8c>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_GPIO_Init+0x8c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <MX_GPIO_Init+0x8c>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_GPIO_Init+0x8c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2108      	movs	r1, #8
 80006aa:	480b      	ldr	r0, [pc, #44]	; (80006d8 <MX_GPIO_Init+0x90>)
 80006ac:	f000 fc22 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006b0:	2308      	movs	r3, #8
 80006b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_GPIO_Init+0x90>)
 80006c8:	f000 fa8a 	bl	8000be0 <HAL_GPIO_Init>

}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000
 80006d8:	48000400 	.word	0x48000400

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_MspInit+0x44>)
 80006f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <HAL_MspInit+0x44>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6613      	str	r3, [r2, #96]	; 0x60
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_MspInit+0x44>)
 80006fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_MspInit+0x44>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <HAL_MspInit+0x44>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000710:	6593      	str	r3, [r2, #88]	; 0x58
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_MspInit+0x44>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <HAL_UART_MspInit+0xa0>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d13a      	bne.n	80007c8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <HAL_UART_MspInit+0xa4>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000756:	4a1f      	ldr	r2, [pc, #124]	; (80007d4 <HAL_UART_MspInit+0xa4>)
 8000758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075c:	6593      	str	r3, [r2, #88]	; 0x58
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <HAL_UART_MspInit+0xa4>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <HAL_UART_MspInit+0xa4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <HAL_UART_MspInit+0xa4>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <HAL_UART_MspInit+0xa4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000782:	2304      	movs	r3, #4
 8000784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000792:	2307      	movs	r3, #7
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f000 fa1e 	bl	8000be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80007a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80007b6:	2303      	movs	r3, #3
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f000 fa0c 	bl	8000be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40004400 	.word	0x40004400
 80007d4:	40021000 	.word	0x40021000

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000824:	f000 f8b2 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <SystemInit+0x5c>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <SystemInit+0x5c>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <SystemInit+0x60>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a11      	ldr	r2, [pc, #68]	; (800088c <SystemInit+0x60>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <SystemInit+0x60>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <SystemInit+0x60>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0d      	ldr	r2, [pc, #52]	; (800088c <SystemInit+0x60>)
 8000858:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800085c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000860:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <SystemInit+0x60>)
 8000864:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000868:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <SystemInit+0x60>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <SystemInit+0x60>)
 8000870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000874:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <SystemInit+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00
 800088c:	40021000 	.word	0x40021000

08000890 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000894:	f7ff ffca 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000898:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800089a:	e003      	b.n	80008a4 <LoopCopyDataInit>

0800089c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800089e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008a2:	3104      	adds	r1, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008a4:	480a      	ldr	r0, [pc, #40]	; (80008d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008ac:	d3f6      	bcc.n	800089c <CopyDataInit>
	ldr	r2, =_sbss
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80008b0:	e002      	b.n	80008b8 <LoopFillZerobss>

080008b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008b4:	f842 3b04 	str.w	r3, [r2], #4

080008b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <LoopForever+0x16>)
	cmp	r2, r3
 80008ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008bc:	d3f9      	bcc.n	80008b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008be:	f002 f825 	bl	800290c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008c2:	f7ff fdff 	bl	80004c4 <main>

080008c6 <LoopForever>:

LoopForever:
    b LoopForever
 80008c6:	e7fe      	b.n	80008c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008c8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80008cc:	080029d4 	.word	0x080029d4
	ldr	r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008d4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80008d8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80008dc:	200000b0 	.word	0x200000b0

080008e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC1_2_IRQHandler>

080008e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f943 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f000 f80e 	bl	8000914 <HAL_InitTick>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	71fb      	strb	r3, [r7, #7]
 8000902:	e001      	b.n	8000908 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000904:	f7ff fef0 	bl	80006e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000908:	79fb      	ldrb	r3, [r7, #7]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HAL_InitTick+0x6c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d023      	beq.n	8000970 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <HAL_InitTick+0x70>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_InitTick+0x6c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f941 	bl	8000bc6 <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d10f      	bne.n	800096a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d809      	bhi.n	8000964 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f000 f919 	bl	8000b8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_InitTick+0x74>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	e007      	b.n	8000974 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e004      	b.n	8000974 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	73fb      	strb	r3, [r7, #15]
 800096e:	e001      	b.n	8000974 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000974:	7bfb      	ldrb	r3, [r7, #15]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008
 8000984:	20000000 	.word	0x20000000
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	200000ac 	.word	0x200000ac

080009b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	200000ac 	.word	0x200000ac

080009cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d4:	f7ff ffee 	bl	80009b4 <HAL_GetTick>
 80009d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d005      	beq.n	80009f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_Delay+0x44>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009f2:	bf00      	nop
 80009f4:	f7ff ffde 	bl	80009b4 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d8f7      	bhi.n	80009f4 <HAL_Delay+0x28>
  {
  }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008

08000a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db0a      	blt.n	8000aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	490c      	ldr	r1, [pc, #48]	; (8000ac4 <__NVIC_SetPriority+0x4c>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa0:	e00a      	b.n	8000ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4908      	ldr	r1, [pc, #32]	; (8000ac8 <__NVIC_SetPriority+0x50>)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	761a      	strb	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000e100 	.word	0xe000e100
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	bf28      	it	cs
 8000aea:	2304      	movcs	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3304      	adds	r3, #4
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	d902      	bls.n	8000afc <NVIC_EncodePriority+0x30>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3b03      	subs	r3, #3
 8000afa:	e000      	b.n	8000afe <NVIC_EncodePriority+0x32>
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43d9      	mvns	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	4313      	orrs	r3, r2
         );
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3724      	adds	r7, #36	; 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f7ff ff8e 	bl	8000a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff47 	bl	8000a14 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff5c 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff8e 	bl	8000acc <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5d 	bl	8000a78 <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffb0 	bl	8000b34 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bee:	e14e      	b.n	8000e8e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 8140 	beq.w	8000e88 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d00b      	beq.n	8000c28 <HAL_GPIO_Init+0x48>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d007      	beq.n	8000c28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c1c:	2b11      	cmp	r3, #17
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b12      	cmp	r3, #18
 8000c26:	d130      	bne.n	8000c8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	091b      	lsrs	r3, r3, #4
 8000c74:	f003 0201 	and.w	r2, r3, #1
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0xea>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b12      	cmp	r3, #18
 8000cc8:	d123      	bne.n	8000d12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	08da      	lsrs	r2, r3, #3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3208      	adds	r2, #8
 8000cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	691a      	ldr	r2, [r3, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	08da      	lsrs	r2, r3, #3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	6939      	ldr	r1, [r7, #16]
 8000d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0203 	and.w	r2, r3, #3
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 809a 	beq.w	8000e88 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d54:	4b55      	ldr	r3, [pc, #340]	; (8000eac <HAL_GPIO_Init+0x2cc>)
 8000d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d58:	4a54      	ldr	r2, [pc, #336]	; (8000eac <HAL_GPIO_Init+0x2cc>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6613      	str	r3, [r2, #96]	; 0x60
 8000d60:	4b52      	ldr	r3, [pc, #328]	; (8000eac <HAL_GPIO_Init+0x2cc>)
 8000d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d6c:	4a50      	ldr	r2, [pc, #320]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d96:	d013      	beq.n	8000dc0 <HAL_GPIO_Init+0x1e0>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a46      	ldr	r2, [pc, #280]	; (8000eb4 <HAL_GPIO_Init+0x2d4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d00d      	beq.n	8000dbc <HAL_GPIO_Init+0x1dc>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a45      	ldr	r2, [pc, #276]	; (8000eb8 <HAL_GPIO_Init+0x2d8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d007      	beq.n	8000db8 <HAL_GPIO_Init+0x1d8>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a44      	ldr	r2, [pc, #272]	; (8000ebc <HAL_GPIO_Init+0x2dc>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d101      	bne.n	8000db4 <HAL_GPIO_Init+0x1d4>
 8000db0:	2303      	movs	r3, #3
 8000db2:	e006      	b.n	8000dc2 <HAL_GPIO_Init+0x1e2>
 8000db4:	2307      	movs	r3, #7
 8000db6:	e004      	b.n	8000dc2 <HAL_GPIO_Init+0x1e2>
 8000db8:	2302      	movs	r3, #2
 8000dba:	e002      	b.n	8000dc2 <HAL_GPIO_Init+0x1e2>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e000      	b.n	8000dc2 <HAL_GPIO_Init+0x1e2>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	f002 0203 	and.w	r2, r2, #3
 8000dc8:	0092      	lsls	r2, r2, #2
 8000dca:	4093      	lsls	r3, r2
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dd2:	4937      	ldr	r1, [pc, #220]	; (8000eb0 <HAL_GPIO_Init+0x2d0>)
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	3302      	adds	r3, #2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000de0:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <HAL_GPIO_Init+0x2e0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e04:	4a2e      	ldr	r2, [pc, #184]	; (8000ec0 <HAL_GPIO_Init+0x2e0>)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <HAL_GPIO_Init+0x2e0>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e2e:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <HAL_GPIO_Init+0x2e0>)
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <HAL_GPIO_Init+0x2e0>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_GPIO_Init+0x2e0>)
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_GPIO_Init+0x2e0>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e82:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <HAL_GPIO_Init+0x2e0>)
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa22 f303 	lsr.w	r3, r2, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f47f aea9 	bne.w	8000bf0 <HAL_GPIO_Init+0x10>
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	371c      	adds	r7, #28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	48000400 	.word	0x48000400
 8000eb8:	48000800 	.word	0x48000800
 8000ebc:	48000c00 	.word	0x48000c00
 8000ec0:	40010400 	.word	0x40010400

08000ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	887b      	ldrh	r3, [r7, #2]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e001      	b.n	8000ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
 8000f00:	4613      	mov	r3, r2
 8000f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f04:	787b      	ldrb	r3, [r7, #1]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40007000 	.word	0x40007000

08000f44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <HAL_PWREx_GetVoltageRange+0x18>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40007000 	.word	0x40007000

08000f60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f6e:	d130      	bne.n	8000fd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f7c:	d038      	beq.n	8000ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7e:	4b20      	ldr	r3, [pc, #128]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f86:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2232      	movs	r2, #50	; 0x32
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	0c9b      	lsrs	r3, r3, #18
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fa4:	e002      	b.n	8000fac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb8:	d102      	bne.n	8000fc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f2      	bne.n	8000fa6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fcc:	d110      	bne.n	8000ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e00f      	b.n	8000ff2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fde:	d007      	beq.n	8000ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fe8:	4a05      	ldr	r2, [pc, #20]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40007000 	.word	0x40007000
 8001004:	20000000 	.word	0x20000000
 8001008:	431bde83 	.word	0x431bde83

0800100c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	f000 bc56 	b.w	80018cc <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001020:	4ba1      	ldr	r3, [pc, #644]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800102a:	4b9f      	ldr	r3, [pc, #636]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0310 	and.w	r3, r3, #16
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80e6 	beq.w	800120e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d007      	beq.n	8001058 <HAL_RCC_OscConfig+0x4c>
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	2b0c      	cmp	r3, #12
 800104c:	f040 808d 	bne.w	800116a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b01      	cmp	r3, #1
 8001054:	f040 8089 	bne.w	800116a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001058:	4b93      	ldr	r3, [pc, #588]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <HAL_RCC_OscConfig+0x66>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	f000 bc2d 	b.w	80018cc <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001076:	4b8c      	ldr	r3, [pc, #560]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	2b00      	cmp	r3, #0
 8001080:	d004      	beq.n	800108c <HAL_RCC_OscConfig+0x80>
 8001082:	4b89      	ldr	r3, [pc, #548]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800108a:	e005      	b.n	8001098 <HAL_RCC_OscConfig+0x8c>
 800108c:	4b86      	ldr	r3, [pc, #536]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 800108e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001098:	4293      	cmp	r3, r2
 800109a:	d224      	bcs.n	80010e6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fdbf 	bl	8001c24 <RCC_SetFlashLatencyFromMSIRange>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f000 bc0d 	b.w	80018cc <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b2:	4b7d      	ldr	r3, [pc, #500]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a7c      	ldr	r2, [pc, #496]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b7a      	ldr	r3, [pc, #488]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	4977      	ldr	r1, [pc, #476]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010d0:	4b75      	ldr	r3, [pc, #468]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	4972      	ldr	r1, [pc, #456]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
 80010e4:	e025      	b.n	8001132 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e6:	4b70      	ldr	r3, [pc, #448]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a6f      	ldr	r2, [pc, #444]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b6d      	ldr	r3, [pc, #436]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	496a      	ldr	r1, [pc, #424]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001104:	4b68      	ldr	r3, [pc, #416]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	4965      	ldr	r1, [pc, #404]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fd7e 	bl	8001c24 <RCC_SetFlashLatencyFromMSIRange>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e3cc      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001132:	f000 fcb3 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8001136:	4602      	mov	r2, r0
 8001138:	4b5b      	ldr	r3, [pc, #364]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	495a      	ldr	r1, [pc, #360]	; (80012ac <HAL_RCC_OscConfig+0x2a0>)
 8001144:	5ccb      	ldrb	r3, [r1, r3]
 8001146:	f003 031f 	and.w	r3, r3, #31
 800114a:	fa22 f303 	lsr.w	r3, r2, r3
 800114e:	4a58      	ldr	r2, [pc, #352]	; (80012b0 <HAL_RCC_OscConfig+0x2a4>)
 8001150:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001152:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <HAL_RCC_OscConfig+0x2a8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fbdc 	bl	8000914 <HAL_InitTick>
 800115c:	4603      	mov	r3, r0
 800115e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d052      	beq.n	800120c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	e3b0      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d032      	beq.n	80011d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001172:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a4c      	ldr	r2, [pc, #304]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800117e:	f7ff fc19 	bl	80009b4 <HAL_GetTick>
 8001182:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001186:	f7ff fc15 	bl	80009b4 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e399      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011a4:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a3f      	ldr	r2, [pc, #252]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	493a      	ldr	r1, [pc, #232]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011c2:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	4935      	ldr	r1, [pc, #212]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	604b      	str	r3, [r1, #4]
 80011d6:	e01a      	b.n	800120e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011d8:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a32      	ldr	r2, [pc, #200]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 80011de:	f023 0301 	bic.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fbe6 	bl	80009b4 <HAL_GetTick>
 80011e8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ec:	f7ff fbe2 	bl	80009b4 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e366      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x1e0>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800120c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d073      	beq.n	8001302 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	2b08      	cmp	r3, #8
 800121e:	d005      	beq.n	800122c <HAL_RCC_OscConfig+0x220>
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	2b0c      	cmp	r3, #12
 8001224:	d10e      	bne.n	8001244 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	2b03      	cmp	r3, #3
 800122a:	d10b      	bne.n	8001244 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d063      	beq.n	8001300 <HAL_RCC_OscConfig+0x2f4>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d15f      	bne.n	8001300 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e343      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124c:	d106      	bne.n	800125c <HAL_RCC_OscConfig+0x250>
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e01d      	b.n	8001298 <HAL_RCC_OscConfig+0x28c>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x274>
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 800126c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e00b      	b.n	8001298 <HAL_RCC_OscConfig+0x28c>
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <HAL_RCC_OscConfig+0x29c>)
 8001292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff fb88 	bl	80009b4 <HAL_GetTick>
 80012a4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012a6:	e010      	b.n	80012ca <HAL_RCC_OscConfig+0x2be>
 80012a8:	40021000 	.word	0x40021000
 80012ac:	0800297c 	.word	0x0800297c
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fb7c 	bl	80009b4 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e300      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ca:	4ba0      	ldr	r3, [pc, #640]	; (800154c <HAL_RCC_OscConfig+0x540>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f0      	beq.n	80012b8 <HAL_RCC_OscConfig+0x2ac>
 80012d6:	e014      	b.n	8001302 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fb6c 	bl	80009b4 <HAL_GetTick>
 80012dc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fb68 	bl	80009b4 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e2ec      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f2:	4b96      	ldr	r3, [pc, #600]	; (800154c <HAL_RCC_OscConfig+0x540>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2d4>
 80012fe:	e000      	b.n	8001302 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d060      	beq.n	80013d0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	2b04      	cmp	r3, #4
 8001312:	d005      	beq.n	8001320 <HAL_RCC_OscConfig+0x314>
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	2b0c      	cmp	r3, #12
 8001318:	d119      	bne.n	800134e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d116      	bne.n	800134e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001320:	4b8a      	ldr	r3, [pc, #552]	; (800154c <HAL_RCC_OscConfig+0x540>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	2b00      	cmp	r3, #0
 800132a:	d005      	beq.n	8001338 <HAL_RCC_OscConfig+0x32c>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e2c9      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001338:	4b84      	ldr	r3, [pc, #528]	; (800154c <HAL_RCC_OscConfig+0x540>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	061b      	lsls	r3, r3, #24
 8001346:	4981      	ldr	r1, [pc, #516]	; (800154c <HAL_RCC_OscConfig+0x540>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800134c:	e040      	b.n	80013d0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d023      	beq.n	800139e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001356:	4b7d      	ldr	r3, [pc, #500]	; (800154c <HAL_RCC_OscConfig+0x540>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a7c      	ldr	r2, [pc, #496]	; (800154c <HAL_RCC_OscConfig+0x540>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001362:	f7ff fb27 	bl	80009b4 <HAL_GetTick>
 8001366:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136a:	f7ff fb23 	bl	80009b4 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e2a7      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800137c:	4b73      	ldr	r3, [pc, #460]	; (800154c <HAL_RCC_OscConfig+0x540>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001388:	4b70      	ldr	r3, [pc, #448]	; (800154c <HAL_RCC_OscConfig+0x540>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	061b      	lsls	r3, r3, #24
 8001396:	496d      	ldr	r1, [pc, #436]	; (800154c <HAL_RCC_OscConfig+0x540>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
 800139c:	e018      	b.n	80013d0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139e:	4b6b      	ldr	r3, [pc, #428]	; (800154c <HAL_RCC_OscConfig+0x540>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a6a      	ldr	r2, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x540>)
 80013a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fb03 	bl	80009b4 <HAL_GetTick>
 80013ae:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff faff 	bl	80009b4 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e283      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c4:	4b61      	ldr	r3, [pc, #388]	; (800154c <HAL_RCC_OscConfig+0x540>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f0      	bne.n	80013b2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d07f      	beq.n	80014dc <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d05f      	beq.n	80014a4 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80013e4:	4b59      	ldr	r3, [pc, #356]	; (800154c <HAL_RCC_OscConfig+0x540>)
 80013e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ea:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699a      	ldr	r2, [r3, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d037      	beq.n	800146a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d006      	beq.n	8001412 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e25c      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01b      	beq.n	8001454 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800141c:	4b4b      	ldr	r3, [pc, #300]	; (800154c <HAL_RCC_OscConfig+0x540>)
 800141e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001422:	4a4a      	ldr	r2, [pc, #296]	; (800154c <HAL_RCC_OscConfig+0x540>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800142c:	f7ff fac2 	bl	80009b4 <HAL_GetTick>
 8001430:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fabe 	bl	80009b4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b11      	cmp	r3, #17
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e242      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_RCC_OscConfig+0x540>)
 8001448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1ef      	bne.n	8001434 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001454:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_OscConfig+0x540>)
 8001456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145a:	f023 0210 	bic.w	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	493a      	ldr	r1, [pc, #232]	; (800154c <HAL_RCC_OscConfig+0x540>)
 8001464:	4313      	orrs	r3, r2
 8001466:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_RCC_OscConfig+0x540>)
 800146c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001470:	4a36      	ldr	r2, [pc, #216]	; (800154c <HAL_RCC_OscConfig+0x540>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147a:	f7ff fa9b 	bl	80009b4 <HAL_GetTick>
 800147e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fa97 	bl	80009b4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b11      	cmp	r3, #17
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e21b      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x540>)
 8001496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0ef      	beq.n	8001482 <HAL_RCC_OscConfig+0x476>
 80014a2:	e01b      	b.n	80014dc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a4:	4b29      	ldr	r3, [pc, #164]	; (800154c <HAL_RCC_OscConfig+0x540>)
 80014a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014aa:	4a28      	ldr	r2, [pc, #160]	; (800154c <HAL_RCC_OscConfig+0x540>)
 80014ac:	f023 0301 	bic.w	r3, r3, #1
 80014b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b4:	f7ff fa7e 	bl	80009b4 <HAL_GetTick>
 80014b8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fa7a 	bl	80009b4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b11      	cmp	r3, #17
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e1fe      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <HAL_RCC_OscConfig+0x540>)
 80014d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ef      	bne.n	80014bc <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80c1 	beq.w	800166c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_RCC_OscConfig+0x540>)
 80014f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10e      	bne.n	800151a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_RCC_OscConfig+0x540>)
 80014fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <HAL_RCC_OscConfig+0x540>)
 8001502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001506:	6593      	str	r3, [r2, #88]	; 0x58
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_RCC_OscConfig+0x540>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001514:	2301      	movs	r3, #1
 8001516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_RCC_OscConfig+0x544>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d11c      	bne.n	8001560 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_RCC_OscConfig+0x544>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <HAL_RCC_OscConfig+0x544>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001532:	f7ff fa3f 	bl	80009b4 <HAL_GetTick>
 8001536:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001538:	e00c      	b.n	8001554 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153a:	f7ff fa3b 	bl	80009b4 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d905      	bls.n	8001554 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e1bf      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
 800154c:	40021000 	.word	0x40021000
 8001550:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001554:	4bb1      	ldr	r3, [pc, #708]	; (800181c <HAL_RCC_OscConfig+0x810>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0ec      	beq.n	800153a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d02c      	beq.n	80015c6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800156c:	4bac      	ldr	r3, [pc, #688]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 800156e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157e:	49a8      	ldr	r1, [pc, #672]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 8001580:	4313      	orrs	r3, r2
 8001582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	d010      	beq.n	80015b4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001592:	4ba3      	ldr	r3, [pc, #652]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 8001594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001598:	4aa1      	ldr	r2, [pc, #644]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015a2:	4b9f      	ldr	r3, [pc, #636]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80015a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a8:	4a9d      	ldr	r2, [pc, #628]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015b2:	e018      	b.n	80015e6 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015b4:	4b9a      	ldr	r3, [pc, #616]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80015b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ba:	4a99      	ldr	r2, [pc, #612]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015c4:	e00f      	b.n	80015e6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015c6:	4b96      	ldr	r3, [pc, #600]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80015c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015cc:	4a94      	ldr	r2, [pc, #592]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80015d6:	4b92      	ldr	r3, [pc, #584]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80015d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015dc:	4a90      	ldr	r2, [pc, #576]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80015de:	f023 0304 	bic.w	r3, r3, #4
 80015e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d016      	beq.n	800161c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ee:	f7ff f9e1 	bl	80009b4 <HAL_GetTick>
 80015f2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f4:	e00a      	b.n	800160c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f6:	f7ff f9dd 	bl	80009b4 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	f241 3288 	movw	r2, #5000	; 0x1388
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e15f      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800160c:	4b84      	ldr	r3, [pc, #528]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 800160e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0ed      	beq.n	80015f6 <HAL_RCC_OscConfig+0x5ea>
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff f9ca 	bl	80009b4 <HAL_GetTick>
 8001620:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff f9c6 	bl	80009b4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e148      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800163a:	4b79      	ldr	r3, [pc, #484]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 800163c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ed      	bne.n	8001624 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001648:	4b75      	ldr	r3, [pc, #468]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164e:	4a74      	ldr	r2, [pc, #464]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 8001650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800165c:	2b01      	cmp	r3, #1
 800165e:	d105      	bne.n	800166c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001660:	4b6f      	ldr	r3, [pc, #444]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	4a6e      	ldr	r2, [pc, #440]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 8001666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800166a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0320 	and.w	r3, r3, #32
 8001674:	2b00      	cmp	r3, #0
 8001676:	d03c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01c      	beq.n	80016ba <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001680:	4b67      	ldr	r3, [pc, #412]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 8001682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001686:	4a66      	ldr	r2, [pc, #408]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001690:	f7ff f990 	bl	80009b4 <HAL_GetTick>
 8001694:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001698:	f7ff f98c 	bl	80009b4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e110      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016aa:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80016ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ef      	beq.n	8001698 <HAL_RCC_OscConfig+0x68c>
 80016b8:	e01b      	b.n	80016f2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016ba:	4b59      	ldr	r3, [pc, #356]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80016bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016c0:	4a57      	ldr	r2, [pc, #348]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff f973 	bl	80009b4 <HAL_GetTick>
 80016ce:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016d2:	f7ff f96f 	bl	80009b4 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e0f3      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016e4:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80016e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1ef      	bne.n	80016d2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 80e7 	beq.w	80018ca <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	2b02      	cmp	r3, #2
 8001702:	f040 80b7 	bne.w	8001874 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0203 	and.w	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	429a      	cmp	r2, r3
 8001718:	d124      	bne.n	8001764 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001724:	3b01      	subs	r3, #1
 8001726:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d11b      	bne.n	8001764 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001736:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d113      	bne.n	8001764 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	3b01      	subs	r3, #1
 800174a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d109      	bne.n	8001764 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	3b01      	subs	r3, #1
 800175e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d061      	beq.n	8001828 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d056      	beq.n	8001818 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 8001770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001774:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001776:	f7ff f91d 	bl	80009b4 <HAL_GetTick>
 800177a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177e:	f7ff f919 	bl	80009b4 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e09d      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_OscConfig+0x818>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017ac:	3a01      	subs	r2, #1
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	4311      	orrs	r1, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017b6:	0212      	lsls	r2, r2, #8
 80017b8:	4311      	orrs	r1, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017be:	0852      	lsrs	r2, r2, #1
 80017c0:	3a01      	subs	r2, #1
 80017c2:	0552      	lsls	r2, r2, #21
 80017c4:	4311      	orrs	r1, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017ca:	0852      	lsrs	r2, r2, #1
 80017cc:	3a01      	subs	r2, #1
 80017ce:	0652      	lsls	r2, r2, #25
 80017d0:	430a      	orrs	r2, r1
 80017d2:	4913      	ldr	r1, [pc, #76]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a10      	ldr	r2, [pc, #64]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80017de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 80017ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017f0:	f7ff f8e0 	bl	80009b4 <HAL_GetTick>
 80017f4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff f8dc 	bl	80009b4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e060      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_RCC_OscConfig+0x814>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001816:	e058      	b.n	80018ca <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e057      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
 800181c:	40007000 	.word	0x40007000
 8001820:	40021000 	.word	0x40021000
 8001824:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001828:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d14a      	bne.n	80018ca <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 8001846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800184c:	f7ff f8b2 	bl	80009b4 <HAL_GetTick>
 8001850:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff f8ae 	bl	80009b4 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e032      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x848>
 8001872:	e02a      	b.n	80018ca <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d025      	beq.n	80018c6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 8001880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001884:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 800188c:	f023 0303 	bic.w	r3, r3, #3
 8001890:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 8001898:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800189c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff f889 	bl	80009b4 <HAL_GetTick>
 80018a2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff f885 	bl	80009b4 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e009      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_RCC_OscConfig+0x8c8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x89a>
 80018c4:	e001      	b.n	80018ca <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0c8      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	4b66      	ldr	r3, [pc, #408]	; (8001a88 <HAL_RCC_ClockConfig+0x1b0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d910      	bls.n	800191c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <HAL_RCC_ClockConfig+0x1b0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 0207 	bic.w	r2, r3, #7
 8001902:	4961      	ldr	r1, [pc, #388]	; (8001a88 <HAL_RCC_ClockConfig+0x1b0>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b5f      	ldr	r3, [pc, #380]	; (8001a88 <HAL_RCC_ClockConfig+0x1b0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0b0      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d04c      	beq.n	80019c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b03      	cmp	r3, #3
 800192e:	d107      	bne.n	8001940 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001930:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d121      	bne.n	8001980 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e09e      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d107      	bne.n	8001958 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001948:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d115      	bne.n	8001980 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e092      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d107      	bne.n	8001970 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001960:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e086      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001970:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e07e      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001980:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 0203 	bic.w	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	493f      	ldr	r1, [pc, #252]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001992:	f7ff f80f 	bl	80009b4 <HAL_GetTick>
 8001996:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199a:	f7ff f80b 	bl	80009b4 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e066      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b0:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 020c 	and.w	r2, r3, #12
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	429a      	cmp	r2, r3
 80019c0:	d1eb      	bne.n	800199a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ce:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	492c      	ldr	r1, [pc, #176]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <HAL_RCC_ClockConfig+0x1b0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d210      	bcs.n	8001a10 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_RCC_ClockConfig+0x1b0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 0207 	bic.w	r2, r3, #7
 80019f6:	4924      	ldr	r1, [pc, #144]	; (8001a88 <HAL_RCC_ClockConfig+0x1b0>)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_RCC_ClockConfig+0x1b0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e036      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4918      	ldr	r1, [pc, #96]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4910      	ldr	r1, [pc, #64]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a4e:	f000 f825 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8001a52:	4602      	mov	r2, r0
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_RCC_ClockConfig+0x1b4>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	490c      	ldr	r1, [pc, #48]	; (8001a90 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	5ccb      	ldrb	r3, [r1, r3]
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe ff4e 	bl	8000914 <HAL_InitTick>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a7c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	0800297c 	.word	0x0800297c
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aaa:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab4:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d121      	bne.n	8001b0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d11e      	bne.n	8001b0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ad0:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	e005      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001af8:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10d      	bne.n	8001b24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b0c:	e00a      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d102      	bne.n	8001b1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_RCC_GetSysClockFreq+0x110>)
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	e004      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d134      	bne.n	8001b94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d003      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0xac>
 8001b40:	e005      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_RCC_GetSysClockFreq+0x110>)
 8001b44:	617b      	str	r3, [r7, #20]
      break;
 8001b46:	e005      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b4a:	617b      	str	r3, [r7, #20]
      break;
 8001b4c:	e002      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	617b      	str	r3, [r7, #20]
      break;
 8001b52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	3301      	adds	r3, #1
 8001b60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	0e5b      	lsrs	r3, r3, #25
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	3301      	adds	r3, #1
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b94:	69bb      	ldr	r3, [r7, #24]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	08002994 	.word	0x08002994
 8001bac:	00f42400 	.word	0x00f42400
 8001bb0:	007a1200 	.word	0x007a1200

08001bb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000000 	.word	0x20000000

08001bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bd0:	f7ff fff0 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4904      	ldr	r1, [pc, #16]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	0800298c 	.word	0x0800298c

08001bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bfc:	f7ff ffda 	bl	8001bb4 <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0adb      	lsrs	r3, r3, #11
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4904      	ldr	r1, [pc, #16]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	0800298c 	.word	0x0800298c

08001c24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c3c:	f7ff f982 	bl	8000f44 <HAL_PWREx_GetVoltageRange>
 8001c40:	6178      	str	r0, [r7, #20]
 8001c42:	e014      	b.n	8001c6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	4a24      	ldr	r2, [pc, #144]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c5c:	f7ff f972 	bl	8000f44 <HAL_PWREx_GetVoltageRange>
 8001c60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c74:	d10b      	bne.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b80      	cmp	r3, #128	; 0x80
 8001c7a:	d919      	bls.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2ba0      	cmp	r3, #160	; 0xa0
 8001c80:	d902      	bls.n	8001c88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c82:	2302      	movs	r3, #2
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e013      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c88:	2301      	movs	r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	e010      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b80      	cmp	r3, #128	; 0x80
 8001c92:	d902      	bls.n	8001c9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c94:	2303      	movs	r3, #3
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	e00a      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b80      	cmp	r3, #128	; 0x80
 8001c9e:	d102      	bne.n	8001ca6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	e004      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b70      	cmp	r3, #112	; 0x70
 8001caa:	d101      	bne.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cac:	2301      	movs	r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 0207 	bic.w	r2, r3, #7
 8001cb8:	4909      	ldr	r1, [pc, #36]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40022000 	.word	0x40022000

08001ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cec:	2300      	movs	r3, #0
 8001cee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 809e 	beq.w	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d06:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001d16:	2300      	movs	r3, #0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00d      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	4a3f      	ldr	r2, [pc, #252]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d26:	6593      	str	r3, [r2, #88]	; 0x58
 8001d28:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d34:	2301      	movs	r3, #1
 8001d36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d38:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a39      	ldr	r2, [pc, #228]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d44:	f7fe fe36 	bl	80009b4 <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d4a:	e009      	b.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4c:	f7fe fe32 	bl	80009b4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d902      	bls.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	74fb      	strb	r3, [r7, #19]
        break;
 8001d5e:	e005      	b.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0ef      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001d6c:	7cfb      	ldrb	r3, [r7, #19]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d15a      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d72:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01e      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d019      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d98:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da0:	4a1f      	ldr	r2, [pc, #124]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db0:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dba:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d016      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fdf2 	bl	80009b4 <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd2:	e00b      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7fe fdee 	bl	80009b4 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d902      	bls.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	74fb      	strb	r3, [r7, #19]
            break;
 8001dea:	e006      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0ec      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8001dfa:	7cfb      	ldrb	r3, [r7, #19]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10b      	bne.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4904      	ldr	r1, [pc, #16]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e16:	e009      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e18:	7cfb      	ldrb	r3, [r7, #19]
 8001e1a:	74bb      	strb	r3, [r7, #18]
 8001e1c:	e006      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e28:	7cfb      	ldrb	r3, [r7, #19]
 8001e2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e2c:	7c7b      	ldrb	r3, [r7, #17]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d105      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4b6e      	ldr	r3, [pc, #440]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	4a6d      	ldr	r2, [pc, #436]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e4a:	4b68      	ldr	r3, [pc, #416]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e50:	f023 0203 	bic.w	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4964      	ldr	r1, [pc, #400]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00a      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e6c:	4b5f      	ldr	r3, [pc, #380]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e72:	f023 020c 	bic.w	r2, r3, #12
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	495c      	ldr	r1, [pc, #368]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e8e:	4b57      	ldr	r3, [pc, #348]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4953      	ldr	r1, [pc, #332]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001eb0:	4b4e      	ldr	r3, [pc, #312]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	494b      	ldr	r1, [pc, #300]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ed2:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4942      	ldr	r1, [pc, #264]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ef4:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	493a      	ldr	r1, [pc, #232]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f16:	4b35      	ldr	r3, [pc, #212]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	4931      	ldr	r1, [pc, #196]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f38:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	4929      	ldr	r1, [pc, #164]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	4920      	ldr	r1, [pc, #128]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d015      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	4918      	ldr	r1, [pc, #96]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f9a:	d105      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a12      	ldr	r2, [pc, #72]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d015      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	490a      	ldr	r1, [pc, #40]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fde:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001fe0:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000

08002010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e040      	b.n	80020a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002026:	2b00      	cmp	r3, #0
 8002028:	d106      	bne.n	8002038 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe fb7c 	bl	8000730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2224      	movs	r2, #36	; 0x24
 800203c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0201 	bic.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8c0 	bl	80021d4 <UART_SetConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e022      	b.n	80020a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fae8 	bl	800263c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800207a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800208a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fb6f 	bl	8002780 <UART_CheckIdleState>
 80020a2:	4603      	mov	r3, r0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	f040 8082 	bne.w	80021ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_UART_Transmit+0x26>
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e07a      	b.n	80021cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_UART_Transmit+0x38>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e073      	b.n	80021cc <HAL_UART_Transmit+0x120>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2221      	movs	r2, #33	; 0x21
 80020f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020fa:	f7fe fc5b 	bl	80009b4 <HAL_GetTick>
 80020fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	88fa      	ldrh	r2, [r7, #6]
 8002104:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002118:	d108      	bne.n	800212c <HAL_UART_Transmit+0x80>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d104      	bne.n	800212c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	e003      	b.n	8002134 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800213c:	e02d      	b.n	800219a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2200      	movs	r2, #0
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fb62 	bl	8002812 <UART_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e039      	b.n	80021cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10b      	bne.n	8002176 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	881a      	ldrh	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800216a:	b292      	uxth	r2, r2
 800216c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	3302      	adds	r3, #2
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	e008      	b.n	8002188 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	781a      	ldrb	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b292      	uxth	r2, r2
 8002180:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1cb      	bne.n	800213e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2200      	movs	r2, #0
 80021ae:	2140      	movs	r1, #64	; 0x40
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fb2e 	bl	8002812 <UART_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e005      	b.n	80021cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80021ca:	2302      	movs	r3, #2
  }
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	4baa      	ldr	r3, [pc, #680]	; (80024a8 <UART_SetConfig+0x2d4>)
 8002200:	4013      	ands	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	69f9      	ldr	r1, [r7, #28]
 8002208:	430b      	orrs	r3, r1
 800220a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a9f      	ldr	r2, [pc, #636]	; (80024ac <UART_SetConfig+0x2d8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d004      	beq.n	800223c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	4313      	orrs	r3, r2
 800223a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a96      	ldr	r2, [pc, #600]	; (80024b0 <UART_SetConfig+0x2dc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d121      	bne.n	800229e <UART_SetConfig+0xca>
 800225a:	4b96      	ldr	r3, [pc, #600]	; (80024b4 <UART_SetConfig+0x2e0>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b03      	cmp	r3, #3
 8002266:	d817      	bhi.n	8002298 <UART_SetConfig+0xc4>
 8002268:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <UART_SetConfig+0x9c>)
 800226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226e:	bf00      	nop
 8002270:	08002281 	.word	0x08002281
 8002274:	0800228d 	.word	0x0800228d
 8002278:	08002287 	.word	0x08002287
 800227c:	08002293 	.word	0x08002293
 8002280:	2301      	movs	r3, #1
 8002282:	76fb      	strb	r3, [r7, #27]
 8002284:	e096      	b.n	80023b4 <UART_SetConfig+0x1e0>
 8002286:	2302      	movs	r3, #2
 8002288:	76fb      	strb	r3, [r7, #27]
 800228a:	e093      	b.n	80023b4 <UART_SetConfig+0x1e0>
 800228c:	2304      	movs	r3, #4
 800228e:	76fb      	strb	r3, [r7, #27]
 8002290:	e090      	b.n	80023b4 <UART_SetConfig+0x1e0>
 8002292:	2308      	movs	r3, #8
 8002294:	76fb      	strb	r3, [r7, #27]
 8002296:	e08d      	b.n	80023b4 <UART_SetConfig+0x1e0>
 8002298:	2310      	movs	r3, #16
 800229a:	76fb      	strb	r3, [r7, #27]
 800229c:	e08a      	b.n	80023b4 <UART_SetConfig+0x1e0>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a85      	ldr	r2, [pc, #532]	; (80024b8 <UART_SetConfig+0x2e4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d132      	bne.n	800230e <UART_SetConfig+0x13a>
 80022a8:	4b82      	ldr	r3, [pc, #520]	; (80024b4 <UART_SetConfig+0x2e0>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d828      	bhi.n	8002308 <UART_SetConfig+0x134>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <UART_SetConfig+0xe8>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022f1 	.word	0x080022f1
 80022c0:	08002309 	.word	0x08002309
 80022c4:	08002309 	.word	0x08002309
 80022c8:	08002309 	.word	0x08002309
 80022cc:	080022fd 	.word	0x080022fd
 80022d0:	08002309 	.word	0x08002309
 80022d4:	08002309 	.word	0x08002309
 80022d8:	08002309 	.word	0x08002309
 80022dc:	080022f7 	.word	0x080022f7
 80022e0:	08002309 	.word	0x08002309
 80022e4:	08002309 	.word	0x08002309
 80022e8:	08002309 	.word	0x08002309
 80022ec:	08002303 	.word	0x08002303
 80022f0:	2300      	movs	r3, #0
 80022f2:	76fb      	strb	r3, [r7, #27]
 80022f4:	e05e      	b.n	80023b4 <UART_SetConfig+0x1e0>
 80022f6:	2302      	movs	r3, #2
 80022f8:	76fb      	strb	r3, [r7, #27]
 80022fa:	e05b      	b.n	80023b4 <UART_SetConfig+0x1e0>
 80022fc:	2304      	movs	r3, #4
 80022fe:	76fb      	strb	r3, [r7, #27]
 8002300:	e058      	b.n	80023b4 <UART_SetConfig+0x1e0>
 8002302:	2308      	movs	r3, #8
 8002304:	76fb      	strb	r3, [r7, #27]
 8002306:	e055      	b.n	80023b4 <UART_SetConfig+0x1e0>
 8002308:	2310      	movs	r3, #16
 800230a:	76fb      	strb	r3, [r7, #27]
 800230c:	e052      	b.n	80023b4 <UART_SetConfig+0x1e0>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6a      	ldr	r2, [pc, #424]	; (80024bc <UART_SetConfig+0x2e8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d120      	bne.n	800235a <UART_SetConfig+0x186>
 8002318:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <UART_SetConfig+0x2e0>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002322:	2b30      	cmp	r3, #48	; 0x30
 8002324:	d013      	beq.n	800234e <UART_SetConfig+0x17a>
 8002326:	2b30      	cmp	r3, #48	; 0x30
 8002328:	d814      	bhi.n	8002354 <UART_SetConfig+0x180>
 800232a:	2b20      	cmp	r3, #32
 800232c:	d009      	beq.n	8002342 <UART_SetConfig+0x16e>
 800232e:	2b20      	cmp	r3, #32
 8002330:	d810      	bhi.n	8002354 <UART_SetConfig+0x180>
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <UART_SetConfig+0x168>
 8002336:	2b10      	cmp	r3, #16
 8002338:	d006      	beq.n	8002348 <UART_SetConfig+0x174>
 800233a:	e00b      	b.n	8002354 <UART_SetConfig+0x180>
 800233c:	2300      	movs	r3, #0
 800233e:	76fb      	strb	r3, [r7, #27]
 8002340:	e038      	b.n	80023b4 <UART_SetConfig+0x1e0>
 8002342:	2302      	movs	r3, #2
 8002344:	76fb      	strb	r3, [r7, #27]
 8002346:	e035      	b.n	80023b4 <UART_SetConfig+0x1e0>
 8002348:	2304      	movs	r3, #4
 800234a:	76fb      	strb	r3, [r7, #27]
 800234c:	e032      	b.n	80023b4 <UART_SetConfig+0x1e0>
 800234e:	2308      	movs	r3, #8
 8002350:	76fb      	strb	r3, [r7, #27]
 8002352:	e02f      	b.n	80023b4 <UART_SetConfig+0x1e0>
 8002354:	2310      	movs	r3, #16
 8002356:	76fb      	strb	r3, [r7, #27]
 8002358:	e02c      	b.n	80023b4 <UART_SetConfig+0x1e0>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a53      	ldr	r2, [pc, #332]	; (80024ac <UART_SetConfig+0x2d8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d125      	bne.n	80023b0 <UART_SetConfig+0x1dc>
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <UART_SetConfig+0x2e0>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800236e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002372:	d017      	beq.n	80023a4 <UART_SetConfig+0x1d0>
 8002374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002378:	d817      	bhi.n	80023aa <UART_SetConfig+0x1d6>
 800237a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800237e:	d00b      	beq.n	8002398 <UART_SetConfig+0x1c4>
 8002380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002384:	d811      	bhi.n	80023aa <UART_SetConfig+0x1d6>
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <UART_SetConfig+0x1be>
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d006      	beq.n	800239e <UART_SetConfig+0x1ca>
 8002390:	e00b      	b.n	80023aa <UART_SetConfig+0x1d6>
 8002392:	2300      	movs	r3, #0
 8002394:	76fb      	strb	r3, [r7, #27]
 8002396:	e00d      	b.n	80023b4 <UART_SetConfig+0x1e0>
 8002398:	2302      	movs	r3, #2
 800239a:	76fb      	strb	r3, [r7, #27]
 800239c:	e00a      	b.n	80023b4 <UART_SetConfig+0x1e0>
 800239e:	2304      	movs	r3, #4
 80023a0:	76fb      	strb	r3, [r7, #27]
 80023a2:	e007      	b.n	80023b4 <UART_SetConfig+0x1e0>
 80023a4:	2308      	movs	r3, #8
 80023a6:	76fb      	strb	r3, [r7, #27]
 80023a8:	e004      	b.n	80023b4 <UART_SetConfig+0x1e0>
 80023aa:	2310      	movs	r3, #16
 80023ac:	76fb      	strb	r3, [r7, #27]
 80023ae:	e001      	b.n	80023b4 <UART_SetConfig+0x1e0>
 80023b0:	2310      	movs	r3, #16
 80023b2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a3c      	ldr	r2, [pc, #240]	; (80024ac <UART_SetConfig+0x2d8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	f040 8082 	bne.w	80024c4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80023c0:	7efb      	ldrb	r3, [r7, #27]
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d823      	bhi.n	800240e <UART_SetConfig+0x23a>
 80023c6:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <UART_SetConfig+0x1f8>)
 80023c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023cc:	080023f1 	.word	0x080023f1
 80023d0:	0800240f 	.word	0x0800240f
 80023d4:	080023f9 	.word	0x080023f9
 80023d8:	0800240f 	.word	0x0800240f
 80023dc:	080023ff 	.word	0x080023ff
 80023e0:	0800240f 	.word	0x0800240f
 80023e4:	0800240f 	.word	0x0800240f
 80023e8:	0800240f 	.word	0x0800240f
 80023ec:	08002407 	.word	0x08002407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023f0:	f7ff fbec 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 80023f4:	6178      	str	r0, [r7, #20]
        break;
 80023f6:	e00f      	b.n	8002418 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023f8:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <UART_SetConfig+0x2ec>)
 80023fa:	617b      	str	r3, [r7, #20]
        break;
 80023fc:	e00c      	b.n	8002418 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023fe:	f7ff fb4d 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8002402:	6178      	str	r0, [r7, #20]
        break;
 8002404:	e008      	b.n	8002418 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800240a:	617b      	str	r3, [r7, #20]
        break;
 800240c:	e004      	b.n	8002418 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	76bb      	strb	r3, [r7, #26]
        break;
 8002416:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8100 	beq.w	8002620 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	429a      	cmp	r2, r3
 800242e:	d305      	bcc.n	800243c <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	d902      	bls.n	8002442 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	76bb      	strb	r3, [r7, #26]
 8002440:	e0ee      	b.n	8002620 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4618      	mov	r0, r3
 8002446:	f04f 0100 	mov.w	r1, #0
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	020b      	lsls	r3, r1, #8
 8002454:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002458:	0202      	lsls	r2, r0, #8
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	6849      	ldr	r1, [r1, #4]
 800245e:	0849      	lsrs	r1, r1, #1
 8002460:	4608      	mov	r0, r1
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	1814      	adds	r4, r2, r0
 8002468:	eb43 0501 	adc.w	r5, r3, r1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	461a      	mov	r2, r3
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	4620      	mov	r0, r4
 8002478:	4629      	mov	r1, r5
 800247a:	f7fd fea7 	bl	80001cc <__aeabi_uldivmod>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4613      	mov	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800248c:	d308      	bcc.n	80024a0 <UART_SetConfig+0x2cc>
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002494:	d204      	bcs.n	80024a0 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	e0bf      	b.n	8002620 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	76bb      	strb	r3, [r7, #26]
 80024a4:	e0bc      	b.n	8002620 <UART_SetConfig+0x44c>
 80024a6:	bf00      	nop
 80024a8:	efff69f3 	.word	0xefff69f3
 80024ac:	40008000 	.word	0x40008000
 80024b0:	40013800 	.word	0x40013800
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40004400 	.word	0x40004400
 80024bc:	40004800 	.word	0x40004800
 80024c0:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024cc:	d15c      	bne.n	8002588 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 80024ce:	7efb      	ldrb	r3, [r7, #27]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d828      	bhi.n	8002526 <UART_SetConfig+0x352>
 80024d4:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <UART_SetConfig+0x308>)
 80024d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024da:	bf00      	nop
 80024dc:	08002501 	.word	0x08002501
 80024e0:	08002509 	.word	0x08002509
 80024e4:	08002511 	.word	0x08002511
 80024e8:	08002527 	.word	0x08002527
 80024ec:	08002517 	.word	0x08002517
 80024f0:	08002527 	.word	0x08002527
 80024f4:	08002527 	.word	0x08002527
 80024f8:	08002527 	.word	0x08002527
 80024fc:	0800251f 	.word	0x0800251f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002500:	f7ff fb64 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 8002504:	6178      	str	r0, [r7, #20]
        break;
 8002506:	e013      	b.n	8002530 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002508:	f7ff fb76 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 800250c:	6178      	str	r0, [r7, #20]
        break;
 800250e:	e00f      	b.n	8002530 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002510:	4b49      	ldr	r3, [pc, #292]	; (8002638 <UART_SetConfig+0x464>)
 8002512:	617b      	str	r3, [r7, #20]
        break;
 8002514:	e00c      	b.n	8002530 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002516:	f7ff fac1 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 800251a:	6178      	str	r0, [r7, #20]
        break;
 800251c:	e008      	b.n	8002530 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800251e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002522:	617b      	str	r3, [r7, #20]
        break;
 8002524:	e004      	b.n	8002530 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	76bb      	strb	r3, [r7, #26]
        break;
 800252e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d074      	beq.n	8002620 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005a      	lsls	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	085b      	lsrs	r3, r3, #1
 8002540:	441a      	add	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	b29b      	uxth	r3, r3
 800254c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d916      	bls.n	8002582 <UART_SetConfig+0x3ae>
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255a:	d212      	bcs.n	8002582 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	b29b      	uxth	r3, r3
 8002560:	f023 030f 	bic.w	r3, r3, #15
 8002564:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	b29b      	uxth	r3, r3
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	b29a      	uxth	r2, r3
 8002572:	89fb      	ldrh	r3, [r7, #14]
 8002574:	4313      	orrs	r3, r2
 8002576:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	89fa      	ldrh	r2, [r7, #14]
 800257e:	60da      	str	r2, [r3, #12]
 8002580:	e04e      	b.n	8002620 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	76bb      	strb	r3, [r7, #26]
 8002586:	e04b      	b.n	8002620 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002588:	7efb      	ldrb	r3, [r7, #27]
 800258a:	2b08      	cmp	r3, #8
 800258c:	d827      	bhi.n	80025de <UART_SetConfig+0x40a>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <UART_SetConfig+0x3c0>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025b9 	.word	0x080025b9
 8002598:	080025c1 	.word	0x080025c1
 800259c:	080025c9 	.word	0x080025c9
 80025a0:	080025df 	.word	0x080025df
 80025a4:	080025cf 	.word	0x080025cf
 80025a8:	080025df 	.word	0x080025df
 80025ac:	080025df 	.word	0x080025df
 80025b0:	080025df 	.word	0x080025df
 80025b4:	080025d7 	.word	0x080025d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025b8:	f7ff fb08 	bl	8001bcc <HAL_RCC_GetPCLK1Freq>
 80025bc:	6178      	str	r0, [r7, #20]
        break;
 80025be:	e013      	b.n	80025e8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025c0:	f7ff fb1a 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 80025c4:	6178      	str	r0, [r7, #20]
        break;
 80025c6:	e00f      	b.n	80025e8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <UART_SetConfig+0x464>)
 80025ca:	617b      	str	r3, [r7, #20]
        break;
 80025cc:	e00c      	b.n	80025e8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025ce:	f7ff fa65 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 80025d2:	6178      	str	r0, [r7, #20]
        break;
 80025d4:	e008      	b.n	80025e8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025da:	617b      	str	r3, [r7, #20]
        break;
 80025dc:	e004      	b.n	80025e8 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	76bb      	strb	r3, [r7, #26]
        break;
 80025e6:	bf00      	nop
    }

    if (pclk != 0U)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d018      	beq.n	8002620 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	085a      	lsrs	r2, r3, #1
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	441a      	add	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	b29b      	uxth	r3, r3
 8002602:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	d908      	bls.n	800261c <UART_SetConfig+0x448>
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d204      	bcs.n	800261c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	e001      	b.n	8002620 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800262c:	7ebb      	ldrb	r3, [r7, #26]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bdb0      	pop	{r4, r5, r7, pc}
 8002636:	bf00      	nop
 8002638:	00f42400 	.word	0x00f42400

0800263c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01a      	beq.n	8002752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800273a:	d10a      	bne.n	8002752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	605a      	str	r2, [r3, #4]
  }
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af02      	add	r7, sp, #8
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002790:	f7fe f910 	bl	80009b4 <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d10e      	bne.n	80027c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f82d 	bl	8002812 <UART_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e023      	b.n	800280a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d10e      	bne.n	80027ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f817 	bl	8002812 <UART_WaitOnFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e00d      	b.n	800280a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	4613      	mov	r3, r2
 8002820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002822:	e05e      	b.n	80028e2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282a:	d05a      	beq.n	80028e2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282c:	f7fe f8c2 	bl	80009b4 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	429a      	cmp	r2, r3
 800283a:	d302      	bcc.n	8002842 <UART_WaitOnFlagUntilTimeout+0x30>
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d11b      	bne.n	800287a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002850:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e043      	b.n	8002902 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02c      	beq.n	80028e2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002896:	d124      	bne.n	80028e2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028a0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028b0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e00f      	b.n	8002902 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4013      	ands	r3, r2
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	bf0c      	ite	eq
 80028f2:	2301      	moveq	r3, #1
 80028f4:	2300      	movne	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d091      	beq.n	8002824 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <__libc_init_array>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	4d0d      	ldr	r5, [pc, #52]	; (8002944 <__libc_init_array+0x38>)
 8002910:	4c0d      	ldr	r4, [pc, #52]	; (8002948 <__libc_init_array+0x3c>)
 8002912:	1b64      	subs	r4, r4, r5
 8002914:	10a4      	asrs	r4, r4, #2
 8002916:	2600      	movs	r6, #0
 8002918:	42a6      	cmp	r6, r4
 800291a:	d109      	bne.n	8002930 <__libc_init_array+0x24>
 800291c:	4d0b      	ldr	r5, [pc, #44]	; (800294c <__libc_init_array+0x40>)
 800291e:	4c0c      	ldr	r4, [pc, #48]	; (8002950 <__libc_init_array+0x44>)
 8002920:	f000 f820 	bl	8002964 <_init>
 8002924:	1b64      	subs	r4, r4, r5
 8002926:	10a4      	asrs	r4, r4, #2
 8002928:	2600      	movs	r6, #0
 800292a:	42a6      	cmp	r6, r4
 800292c:	d105      	bne.n	800293a <__libc_init_array+0x2e>
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	f855 3b04 	ldr.w	r3, [r5], #4
 8002934:	4798      	blx	r3
 8002936:	3601      	adds	r6, #1
 8002938:	e7ee      	b.n	8002918 <__libc_init_array+0xc>
 800293a:	f855 3b04 	ldr.w	r3, [r5], #4
 800293e:	4798      	blx	r3
 8002940:	3601      	adds	r6, #1
 8002942:	e7f2      	b.n	800292a <__libc_init_array+0x1e>
 8002944:	080029cc 	.word	0x080029cc
 8002948:	080029cc 	.word	0x080029cc
 800294c:	080029cc 	.word	0x080029cc
 8002950:	080029d0 	.word	0x080029d0

08002954 <memset>:
 8002954:	4402      	add	r2, r0
 8002956:	4603      	mov	r3, r0
 8002958:	4293      	cmp	r3, r2
 800295a:	d100      	bne.n	800295e <memset+0xa>
 800295c:	4770      	bx	lr
 800295e:	f803 1b01 	strb.w	r1, [r3], #1
 8002962:	e7f9      	b.n	8002958 <memset+0x4>

08002964 <_init>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr

08002970 <_fini>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr
